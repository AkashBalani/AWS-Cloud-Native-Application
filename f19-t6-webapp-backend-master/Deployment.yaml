---
apiVersion: v1
kind: Namespace
metadata:
  name: api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: map
  #namespace: api
data:
    NODE_ENV: DEV
    PORT: "5000"
    SALT_ROUNDS: "10"
    DB_HOST: "csye7374-rds-instance.ctglp6wapayx.us-east-1.rds.amazonaws.com"
    DB_USER: "postgres1"
    DB_PASS: "csye7374"
    DB_PORT: "5432"
    DB_NAME: "csye7374"
    BUCKET_NAME: "prod-csye7374-recipe-image"
    AWS_ACCESS_KEY_ID: "AKIA4XKXXXXXXXXXX"
    SECRET_ACCESS_KEY_ID: "bUOFruvCZZ2Y8elwXXXXXXXXXXXXXXX"
    ELASTIC_HOST: "dns-host-name-of-your-elasticsearch-loadbalancer:9200"

---
---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: node-recipe-server           # Name of the Kubernetes resource
  #namespace: api
spec:
  replicas: 3                    # Number of pods to run at any given time
  #minReadySeconds: 45
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: node-recipe-server        # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all of the pods in this deployment
        app: node-recipe-server
    spec:                        # Spec for the container which will run in the Pod
      containers:
      - name: node-recipe-server
        image: akmurgod/f19-t6-webapp-backend:8922c696f528616fb5c75946ee38d00d658c7f85
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "750m"
        ports:
          - name : liveness-port
            containerPort: 5000  # Should match the port number that the nodejs application listens on
            hostPort: 5000
        envFrom:
        - configMapRef:
           name: map
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: liveness-port
          initialDelaySeconds: 5
          periodSeconds: 3

---
---
apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  name: node-recipe-app-service   # Name of the resource
  #namespace: api
spec:
  ports:                         # Take incoming HTTP requests on port 9090 and forward them to the targetPort of 8080
  - name: http
    protocol: TCP
    port: 80
    targetPort: 5000
    nodePort : 30038
  selector:
    app: node-recipe-app          # Map any pod with name go-hello-world to this service
  type: LoadBalancer
